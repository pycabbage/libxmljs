name: Build

on:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event }}
  cancel-in-progress: true

jobs:
  build-linux:
    name: Build
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        node-version: [14, 16, 18, 19]
        arch: [ amd64, arm64v8, arm32v7 ]
    env:
      tagname: libxmljs_builder_${{ matrix.node-version }}_${{ matrix.arch }}:latest
      container-name: libxmljs_builder_container
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: cache build
        uses: actions/cache@v3
        id: cache
        with:
          path: ./dist/
          key: |
            linux-${{ matrix.arch }}-node${{ matrix.node-version }}-${{
              hashFiles(
                '**/yarn.lock',
                'binding.gyp',
                'Dockerfile',
                'src/**/*',
                'vendor/**/*'
              )
            }}

      - name: Set up QEMU
        if: steps.cache.outputs.cache-hit != 'true'
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        if: steps.cache.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        if: steps.cache.outputs.cache-hit != 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
          tags: ${{ env.tagname }}
          build-args: |
            NODE_VERSION=${{ matrix.node-version }}
            ARCH=${{ matrix.arch }}

      - name: Copy built files from container to host
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          docker run --name ${{ env.container-name }} -d ${{ env.tagname }}
          docker cp ${{ env.container-name }}:/dist/ .
          docker stop -t 5 ${{ env.container-name }}
          docker rm ${{ env.container-name }}

      - name: list files
        run: ls -lR ./dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: node${{ matrix.node-version }}-linux-${{ matrix.arch }}
          path: "dist/**/*.tar.gz"

  build-win-darwin:
    name: Build (win,darwin)
    strategy:
      fail-fast: false
      matrix:
        node-version: [14, 16, 18, 19]
        osarch:
          - { os: macos-latest, arch: x64 }
          - { os: windows-2019, arch: x64 }
          - { os: windows-2019, arch: x86 }

    runs-on: ${{ matrix.osarch.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          architecture: ${{ matrix.osarch.arch }}
          cache: yarn

      - name: cache build
        uses: actions/cache@v3
        with:
          path: ./build/
          key: |
            ${{ runner.os }}-${{ matrix.osarch.arch }}-node${{ matrix.node-version }}-${{
              hashFiles(
                '**/yarn.lock',
                'binding.gyp',
                'Dockerfile',
                'src/**/*',
                'vendor/**/*'
              )
            }}

      - name: Install dependencies
        run: |
          npm i -g yarn@latest
          yarn install

      - name: Build
        run: |
          yarn build
          yarn dist

      - name: copy files
        run: |
          mkdir -p ./dist
          cp -r ./build/stage/pycabbage/libxmljs/releases/download/*/*.tar.gz ./dist/
          ls ./dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: node${{ matrix.node-version }}-${{ matrix.os }}
          path: "dist/**/*.tar.gz"

  publish:
    name: Publish built artifact
    runs-on: ubuntu-latest
    needs: [ build-linux, build-win-darwin ]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: .
      - name: move files
        run: |
          mkdir ./dist/
          cp ./node*/*.tar.gz ./dist/
          ls -lR ./dist/
      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: ./dist/*.tar.gz
